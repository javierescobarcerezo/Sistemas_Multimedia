/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.jec.practicafinal;

import java.awt.Color;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.jec.iu.LienzoImagen2D;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;

/**
 *
 * @author jescobar
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    BufferedImage imgSource;
    SMClipPlayer player = null;
    SMSoundRecorder recorder = null;
    File archivo = null;
    boolean reproduciendo = false;
    
    class ManejadorAudio implements LineListener { 
        @Override 
        public void update(LineEvent event) {
            
            if (event.getType() == LineEvent.Type.START) {
                playBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pausa24x24.png")));
                stopBoton.setEnabled(true);
                reproduciendo = true;
                System.out.println("reproduciendo: "+reproduciendo);
            } 
            if (event.getType() == LineEvent.Type.STOP) {
                playBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png")));
                reproduciendo = false;
                System.out.println("reproduciendo: "+reproduciendo);
            } 
            if (event.getType() == LineEvent.Type.CLOSE) {
                stopBoton.setEnabled(false);
                reproduciendo = false;
                System.out.println("CLOSE: "+reproduciendo);
            }
        }
    }
    
    private class VideoListener extends MediaPlayerEventAdapter { 
        public void playing(MediaPlayer mediaPlayer) { 
            stopBoton.setEnabled(true); 
            playBoton.setEnabled(false); 
        } 
        public void paused(MediaPlayer mediaPlayer) { 
            stopBoton.setEnabled(false); 
            playBoton.setEnabled(true); 
        } 
        public void finished(MediaPlayer mediaPlayer) { 
            this.paused(mediaPlayer); 
        } 
    }
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem4 = new javax.swing.JMenuItem();
        escritorio = new javax.swing.JDesktopPane();
        panelHerramientas = new javax.swing.JPanel();
        barraDibujo = new javax.swing.JToolBar();
        botonNuevo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        botonPunto = new javax.swing.JToggleButton();
        botonLinea = new javax.swing.JToggleButton();
        botonRectangulo = new javax.swing.JToggleButton();
        botonOvalo = new javax.swing.JToggleButton();
        botonSeleccion = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        comboBoxColor = new javax.swing.JComboBox<>();
        spinnerStroke = new javax.swing.JSpinner();
        botonRellenar = new javax.swing.JButton();
        botonTransparencia = new javax.swing.JButton();
        botonAlisar = new javax.swing.JButton();
        barraImagen = new javax.swing.JToolBar();
        sliderBrillo = new javax.swing.JSlider();
        comboBoxFiltros = new javax.swing.JComboBox<>();
        botonContraste = new javax.swing.JButton();
        botonIluminar = new javax.swing.JButton();
        botonOscurecer = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        sliderGiro = new javax.swing.JSlider();
        botonGiro90 = new javax.swing.JButton();
        botonGiro180 = new javax.swing.JButton();
        botonGiro270 = new javax.swing.JButton();
        botonAumentar = new javax.swing.JButton();
        botonDisminuir = new javax.swing.JButton();
        BarraMultimedia = new javax.swing.JToolBar();
        playBoton = new javax.swing.JButton();
        stopBoton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        listaReproduccion = new javax.swing.JComboBox<>();
        grabarBoton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        botonWebcam = new javax.swing.JButton();
        botonSnapshot = new javax.swing.JButton();
        panelSur = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuNuevo = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        menuVer = new javax.swing.JMenu();
        MVerDibujo = new javax.swing.JCheckBoxMenuItem();
        MVerImagen = new javax.swing.JCheckBoxMenuItem();
        MVerMultimedia = new javax.swing.JCheckBoxMenuItem();
        menuAyuda = new javax.swing.JMenu();

        FormListener formListener = new FormListener();

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pr√°ctica Final - Javier Escobar Cerezo");

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 932, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 377, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        panelHerramientas.setLayout(new java.awt.BorderLayout());

        barraDibujo.setRollover(true);
        barraDibujo.setEnabled(false);

        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        botonNuevo.setFocusable(false);
        botonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevo.addActionListener(formListener);
        barraDibujo.add(botonNuevo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addActionListener(formListener);
        barraDibujo.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraDibujo.add(botonGuardar);
        barraDibujo.add(jSeparator1);

        buttonGroup1.add(botonPunto);
        botonPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        botonPunto.setFocusable(false);
        botonPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPunto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraDibujo.add(botonPunto);

        buttonGroup1.add(botonLinea);
        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Linea.gif"))); // NOI18N
        botonLinea.setSelected(true);
        botonLinea.setFocusable(false);
        botonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraDibujo.add(botonLinea);

        buttonGroup1.add(botonRectangulo);
        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        botonRectangulo.setFocusable(false);
        botonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraDibujo.add(botonRectangulo);

        buttonGroup1.add(botonOvalo);
        botonOvalo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        botonOvalo.setFocusable(false);
        botonOvalo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonOvalo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraDibujo.add(botonOvalo);

        botonSeleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        botonSeleccion.setFocusable(false);
        botonSeleccion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonSeleccion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonSeleccion.addActionListener(formListener);
        barraDibujo.add(botonSeleccion);
        barraDibujo.add(jSeparator2);

        comboBoxColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Negro", "Rojo", "Azul", "Blanco", "Amarillo", "Verde" }));
        comboBoxColor.addActionListener(formListener);
        barraDibujo.add(comboBoxColor);

        spinnerStroke.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(30.0f), Float.valueOf(0.5f)));
        spinnerStroke.addChangeListener(formListener);
        barraDibujo.add(spinnerStroke);

        botonRellenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        botonRellenar.setFocusable(false);
        botonRellenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRellenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraDibujo.add(botonRellenar);

        botonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        botonTransparencia.setFocusable(false);
        botonTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraDibujo.add(botonTransparencia);

        botonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        botonAlisar.setFocusable(false);
        botonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraDibujo.add(botonAlisar);

        panelHerramientas.add(barraDibujo, java.awt.BorderLayout.PAGE_START);

        barraImagen.setRollover(true);

        sliderBrillo.setMinimum(-100);
        sliderBrillo.setValue(0);
        sliderBrillo.setPreferredSize(new java.awt.Dimension(100, 21));
        sliderBrillo.addChangeListener(formListener);
        sliderBrillo.addFocusListener(formListener);
        barraImagen.add(sliderBrillo);

        comboBoxFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        comboBoxFiltros.addActionListener(formListener);
        barraImagen.add(comboBoxFiltros);

        botonContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        botonContraste.setFocusable(false);
        botonContraste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonContraste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonContraste.addActionListener(formListener);
        barraImagen.add(botonContraste);

        botonIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        botonIluminar.setFocusable(false);
        botonIluminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonIluminar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonIluminar.addActionListener(formListener);
        barraImagen.add(botonIluminar);

        botonOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        botonOscurecer.setFocusable(false);
        botonOscurecer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonOscurecer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonOscurecer.addActionListener(formListener);
        barraImagen.add(botonOscurecer);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setPreferredSize(new java.awt.Dimension(44, 28));
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(formListener);
        barraImagen.add(jButton4);

        sliderGiro.setValue(0);
        sliderGiro.setPreferredSize(new java.awt.Dimension(75, 21));
        sliderGiro.addChangeListener(formListener);
        sliderGiro.addFocusListener(formListener);
        barraImagen.add(sliderGiro);

        botonGiro90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        botonGiro90.setFocusable(false);
        botonGiro90.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGiro90.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGiro90.addActionListener(formListener);
        barraImagen.add(botonGiro90);

        botonGiro180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        botonGiro180.setFocusable(false);
        botonGiro180.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGiro180.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGiro180.addActionListener(formListener);
        barraImagen.add(botonGiro180);

        botonGiro270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        botonGiro270.setFocusable(false);
        botonGiro270.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGiro270.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGiro270.addActionListener(formListener);
        barraImagen.add(botonGiro270);

        botonAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        botonAumentar.setFocusable(false);
        botonAumentar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAumentar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAumentar.addActionListener(formListener);
        barraImagen.add(botonAumentar);

        botonDisminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        botonDisminuir.setFocusable(false);
        botonDisminuir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDisminuir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDisminuir.addActionListener(formListener);
        barraImagen.add(botonDisminuir);

        panelHerramientas.add(barraImagen, java.awt.BorderLayout.CENTER);

        BarraMultimedia.setRollover(true);

        playBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Play.png"))); // NOI18N
        playBoton.setFocusable(false);
        playBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playBoton.addActionListener(formListener);
        BarraMultimedia.add(playBoton);

        stopBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Stop.png"))); // NOI18N
        stopBoton.setEnabled(false);
        stopBoton.setFocusable(false);
        stopBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopBoton.addActionListener(formListener);
        BarraMultimedia.add(stopBoton);
        BarraMultimedia.add(jSeparator3);

        BarraMultimedia.add(listaReproduccion);

        grabarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        grabarBoton.setFocusable(false);
        grabarBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        grabarBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        grabarBoton.addActionListener(formListener);
        BarraMultimedia.add(grabarBoton);
        BarraMultimedia.add(jSeparator4);

        botonWebcam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        botonWebcam.setToolTipText("");
        botonWebcam.setFocusable(false);
        botonWebcam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonWebcam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonWebcam.addActionListener(formListener);
        BarraMultimedia.add(botonWebcam);

        botonSnapshot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N
        botonSnapshot.setToolTipText("");
        botonSnapshot.setFocusable(false);
        botonSnapshot.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonSnapshot.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonSnapshot.addActionListener(formListener);
        BarraMultimedia.add(botonSnapshot);

        panelHerramientas.add(BarraMultimedia, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(panelHerramientas, java.awt.BorderLayout.PAGE_START);

        panelSur.setLayout(new java.awt.BorderLayout());

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(204, 204, 204));
        jTextField1.setText("Punto");
        panelSur.add(jTextField1, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelSur, java.awt.BorderLayout.PAGE_END);

        menuArchivo.setText("Archivo");

        menuNuevo.setText("Nuevo");
        menuNuevo.addActionListener(formListener);
        menuArchivo.add(menuNuevo);

        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(formListener);
        menuArchivo.add(menuAbrir);

        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(formListener);
        menuArchivo.add(menuGuardar);

        barraMenu.add(menuArchivo);

        jMenu2.setText("Edit");
        barraMenu.add(jMenu2);

        jMenu3.setText("Imagen");
        barraMenu.add(jMenu3);

        menuVer.setText("Ver");

        MVerDibujo.setSelected(true);
        MVerDibujo.setText("Mostrar Barra Dibujo");
        MVerDibujo.addActionListener(formListener);
        menuVer.add(MVerDibujo);

        MVerImagen.setSelected(true);
        MVerImagen.setText("Mostrar Barra Imagen");
        MVerImagen.addActionListener(formListener);
        menuVer.add(MVerImagen);

        MVerMultimedia.setSelected(true);
        MVerMultimedia.setText("Mostrar Barra Audio/Video");
        MVerMultimedia.addActionListener(formListener);
        menuVer.add(MVerMultimedia);

        barraMenu.add(menuVer);

        menuAyuda.setText("Ayuda");
        barraMenu.add(menuAyuda);

        setJMenuBar(barraMenu);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == comboBoxColor) {
                VentanaPrincipal.this.comboBoxColorActionPerformed(evt);
            }
            else if (evt.getSource() == botonSeleccion) {
                VentanaPrincipal.this.botonSeleccionActionPerformed(evt);
            }
            else if (evt.getSource() == botonAbrir) {
                VentanaPrincipal.this.botonAbrirActionPerformed(evt);
            }
            else if (evt.getSource() == botonNuevo) {
                VentanaPrincipal.this.botonNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == playBoton) {
                VentanaPrincipal.this.playBotonActionPerformed(evt);
            }
            else if (evt.getSource() == stopBoton) {
                VentanaPrincipal.this.stopBotonActionPerformed(evt);
            }
            else if (evt.getSource() == grabarBoton) {
                VentanaPrincipal.this.grabarBotonActionPerformed(evt);
            }
            else if (evt.getSource() == comboBoxFiltros) {
                VentanaPrincipal.this.comboBoxFiltrosActionPerformed(evt);
            }
            else if (evt.getSource() == MVerDibujo) {
                VentanaPrincipal.this.MVerDibujoActionPerformed(evt);
            }
            else if (evt.getSource() == MVerImagen) {
                VentanaPrincipal.this.MVerImagenActionPerformed(evt);
            }
            else if (evt.getSource() == MVerMultimedia) {
                VentanaPrincipal.this.MVerMultimediaActionPerformed(evt);
            }
            else if (evt.getSource() == botonContraste) {
                VentanaPrincipal.this.botonContrasteActionPerformed(evt);
            }
            else if (evt.getSource() == botonIluminar) {
                VentanaPrincipal.this.botonIluminarActionPerformed(evt);
            }
            else if (evt.getSource() == botonOscurecer) {
                VentanaPrincipal.this.botonOscurecerActionPerformed(evt);
            }
            else if (evt.getSource() == jButton4) {
                VentanaPrincipal.this.jButton4ActionPerformed(evt);
            }
            else if (evt.getSource() == botonAumentar) {
                VentanaPrincipal.this.botonAumentarActionPerformed(evt);
            }
            else if (evt.getSource() == botonDisminuir) {
                VentanaPrincipal.this.botonDisminuirActionPerformed(evt);
            }
            else if (evt.getSource() == botonGiro90) {
                VentanaPrincipal.this.botonGiro90ActionPerformed(evt);
            }
            else if (evt.getSource() == botonGiro180) {
                VentanaPrincipal.this.botonGiro180ActionPerformed(evt);
            }
            else if (evt.getSource() == botonGiro270) {
                VentanaPrincipal.this.botonGiro270ActionPerformed(evt);
            }
            else if (evt.getSource() == botonWebcam) {
                VentanaPrincipal.this.botonWebcamActionPerformed(evt);
            }
            else if (evt.getSource() == botonSnapshot) {
                VentanaPrincipal.this.botonSnapshotActionPerformed(evt);
            }
            else if (evt.getSource() == menuNuevo) {
                VentanaPrincipal.this.menuNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == menuAbrir) {
                VentanaPrincipal.this.menuAbrirActionPerformed(evt);
            }
            else if (evt.getSource() == menuGuardar) {
                VentanaPrincipal.this.menuGuardarActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == sliderBrillo) {
                VentanaPrincipal.this.sliderBrilloFocusGained(evt);
            }
            else if (evt.getSource() == sliderGiro) {
                VentanaPrincipal.this.sliderGiroFocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == sliderBrillo) {
                VentanaPrincipal.this.sliderBrilloFocusLost(evt);
            }
            else if (evt.getSource() == sliderGiro) {
                VentanaPrincipal.this.sliderGiroFocusLost(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == spinnerStroke) {
                VentanaPrincipal.this.spinnerStrokeStateChanged(evt);
            }
            else if (evt.getSource() == sliderBrillo) {
                VentanaPrincipal.this.sliderBrilloStateChanged(evt);
            }
            else if (evt.getSource() == sliderGiro) {
                VentanaPrincipal.this.sliderGiroStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxColorActionPerformed
        JComboBox cb = (JComboBox)evt.getSource();
        String color = (String)cb.getSelectedItem();
        VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(vi != null){
            sm.jec.iu.Lienzo2D l = vi.getLienzo();
            switch(color){
                case "Negro":   l.setColor(Color.black);
                break;
                case "Azul":   l.setColor(Color.blue);
                break;
                case "Rojo":   l.setColor(Color.red);
                break;
                case "Blanco":   l.setColor(Color.white);
                break;
                case "Amarillo":   l.setColor(Color.yellow);
                break;
                case "Verde":   l.setColor(Color.green);
                break;
            }
            l.repaint();
        }
    }//GEN-LAST:event_comboBoxColorActionPerformed

    private void spinnerStrokeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerStrokeStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen)this.escritorio.getSelectedFrame();
        if(vi != null){
            float grosor = (float)this.spinnerStroke.getValue();
            vi.getLienzo().setGrosor(grosor);
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_spinnerStrokeStateChanged

    private void botonSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSeleccionActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)this.escritorio.getSelectedFrame();
        if(vi != null){
            if(botonSeleccion.isSelected())
                vi.getLienzo().setEditar(true);
            else
                vi.getLienzo().setEditar(false);
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_botonSeleccionActionPerformed

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        dlg.setAcceptAllFileFilterUsed(false);
        FileFilter filterImg = new FileNameExtensionFilter("Imagenes", "png", "jpg", "jpeg");
        dlg.addChoosableFileFilter(filterImg);
        FileFilter filterAud = new FileNameExtensionFilter("Audio", "wav", "mp3", "au");
        dlg.addChoosableFileFilter(filterAud);
        FileFilter filterVid = new FileNameExtensionFilter("Video", "mpg", "mp4", "avi");
        dlg.addChoosableFileFilter(filterVid);
        int resp = dlg.showOpenDialog(this);
        if(resp == JFileChooser.APPROVE_OPTION){
            if(dlg.getFileFilter() == filterImg){
                try{                
                    File f = dlg.getSelectedFile();
                    BufferedImage img = ImageIO.read(f);
                    VentanaInternaImagen vi = newInternalWindow();
                    vi.setSize(img.getWidth(), img.getHeight());
                    LienzoImagen2D l = (LienzoImagen2D)vi.getLienzo();
                    l.setImage(img);
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                }catch(Exception ex){ 
                    System.err.println("Error al leer la imagen");
                }
            }else if(dlg.getFileFilter() == filterAud){
                try{
                    File file = dlg.getSelectedFile();
                    File f = new File(file.getAbsolutePath() ){ @Override public String toString(){ return this.getName(); } };
                    this.listaReproduccion.addItem(f);
                }catch(Exception ex){ 
                    System.err.println("Error al leer el archivo de audio");
                }
            }else if(dlg.getFileFilter() == filterVid){
                try{ 
                    File f = dlg.getSelectedFile();
                    VentanaInternaVLCPlayer vi = VentanaInternaVLCPlayer.getInstance(f);
                    vi.addMediaPlayerEventListener(new VideoListener());
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
//                    vi.play();
                }catch(Exception ex){ 
                    System.err.println("Error al encontrar el archivo de video ");
                }
            }
        }
    }//GEN-LAST:event_botonAbrirActionPerformed

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        nuevaVentanaInternaImagen();
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void playBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBotonActionPerformed
        VentanaInterna v = (VentanaInterna)escritorio.getSelectedFrame();
        VentanaInternaVLCPlayer vi = null;
        if(v.getTipo().compareTo("video") == 0)
            vi = (VentanaInternaVLCPlayer)v;
        if(vi != null){
            vi.play();
        }else{
            File f = (File)listaReproduccion.getSelectedItem();
            if(f!=null){
                if (player == null) {
                    player = new SMClipPlayer(f);
                    player.addLineListener(new ManejadorAudio());
                    if (player != null) {
                        player.play();
                    }
                }else{
                    if(reproduciendo){
                        player.pause();
                    }else{
                        player.resume();
                    }
                }
            }
        }       
        
    }//GEN-LAST:event_playBotonActionPerformed

    private void stopBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBotonActionPerformed
        VentanaInternaVLCPlayer vi = (VentanaInternaVLCPlayer)escritorio.getSelectedFrame();
        if(vi != null){
            vi.stop();
        }else{
            if (player != null) {
                player.pause();
                player=null;
            }
        }
    }//GEN-LAST:event_stopBotonActionPerformed

    private void grabarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarBotonActionPerformed
        if(recorder == null){
            File file = new File("./test.wav");
            archivo = new File(file.getAbsolutePath() ){ @Override public String toString(){ return this.getName(); } };
            recorder = new SMSoundRecorder(file);
            recorder.record();
            grabarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stopRecord24x24.png")));
        }else{
            grabarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png")));
            recorder.stop();
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    File f = dlg.getSelectedFile();
                    archivo.renameTo(f.getAbsoluteFile());
                    archivo = new File(f.getAbsolutePath() ){ @Override public String toString(){ return this.getName(); } };
                    this.listaReproduccion.addItem(archivo);
                }catch (Exception ex) {
                    System.err.println("Error al guardar la grabaci√≥n");
                }
            }
            recorder = null;
        }
    }//GEN-LAST:event_grabarBotonActionPerformed

    private void comboBoxFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxFiltrosActionPerformed
        JComboBox cb = (JComboBox)evt.getSource();
        String filtro = (String)cb.getSelectedItem();
        VentanaInternaImagen vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(vi != null){
            Kernel k;
            switch(filtro){
                case "Media":  k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                break;
                case "Binomial":    k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
                case "Enfoque":     k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
                case "Relieve":     k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
                case "Laplaciano":    k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
                default: k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
            }
            LienzoImagen2D l = vi.getLienzo();
            ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
            BufferedImage img = cop.filter(l.getImage(false), null);
            l.setImage(img);
            l.repaint();
        }
    }//GEN-LAST:event_comboBoxFiltrosActionPerformed

    private void MVerDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MVerDibujoActionPerformed
        if(MVerDibujo.isSelected()){
            MVerDibujo.setSelected(true);
            barraDibujo.setVisible(true);
        }else{
            MVerDibujo.setSelected(false);
            barraDibujo.setVisible(false);
        }
    }//GEN-LAST:event_MVerDibujoActionPerformed

    private void MVerImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MVerImagenActionPerformed
        if(MVerImagen.isSelected()){
            MVerImagen.setSelected(true);
            barraImagen.setVisible(true);
        }else{
            MVerImagen.setSelected(false);
            barraImagen.setVisible(false);
        }
    }//GEN-LAST:event_MVerImagenActionPerformed

    private void MVerMultimediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MVerMultimediaActionPerformed
        if(MVerMultimedia.isSelected()){
            MVerMultimedia.setSelected(true);
            BarraMultimedia.setVisible(true);
        }else{
            MVerMultimedia.setSelected(false);
            BarraMultimedia.setVisible(false);
        }
    }//GEN-LAST:event_MVerMultimediaActionPerformed

    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        VentanaInternaImagen vi=(VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            if(imgSource != null){
                try{
                    float valor = (float)this.sliderBrillo.getValue();
                    RescaleOp rop = new RescaleOp(1.0F, valor, null);
                    rop.filter(imgSource, vi.getLienzo().getImage(false));
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        VentanaInternaImagen vi=(VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImage(false).getColorModel();
            WritableRaster raster = vi.getLienzo().getImage(false).copyData(null);
            boolean alfaPre = vi.getLienzo().getImage(false).isAlphaPremultiplied();
            imgSource = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_sliderBrilloFocusGained

    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        imgSource = null;
        sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost

    private void botonContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteActionPerformed
        VentanaInternaImagen vi=(VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage(false);
            if(imgSource != null){
                try{
                    int type = LookupTableProducer.TYPE_SFUNCION;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    //Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonContrasteActionPerformed

    private void botonIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIluminarActionPerformed
        VentanaInternaImagen vi=(VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage(false);
            if(imgSource != null){
                try{
                    int type = LookupTableProducer.TYPE_LOGARITHM;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    //Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonIluminarActionPerformed

    private void botonOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOscurecerActionPerformed
        VentanaInternaImagen vi=(VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage(false);
            if(imgSource != null){
                try{
                    int type = LookupTableProducer.TYPE_POWER;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    //Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonOscurecerActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        VentanaInternaImagen vi=(VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage(false);
            if(imgSource != null){
                try{
                    LookupTable lt = seno(180.0);
                    LookupOp lop = new LookupOp(lt, null);
                    //Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void sliderGiroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGiroStateChanged
        VentanaInternaImagen vi=(VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage(false);
            AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(sliderGiro.getValue()),
                imgSource.getWidth()/2,imgSource.getHeight()/2);
            if(imgSource != null){
                try{
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgDest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgDest);
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderGiroStateChanged

    private void sliderGiroFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderGiroFocusGained
        VentanaInternaImagen vi=(VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImage(false).getColorModel();
            WritableRaster raster = vi.getLienzo().getImage(false).copyData(null);
            boolean alfaPre = vi.getLienzo().getImage(false).isAlphaPremultiplied();
            imgSource = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_sliderGiroFocusGained

    private void sliderGiroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderGiroFocusLost
        imgSource = null;
        sliderGiro.setValue(0);
    }//GEN-LAST:event_sliderGiroFocusLost

    private void botonAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAumentarActionPerformed
        VentanaInternaImagen vi=(VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage(false);
            AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
            if(imgSource != null){
                try{
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgDest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgDest);
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonAumentarActionPerformed

    private void botonDisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDisminuirActionPerformed
        VentanaInternaImagen vi= (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage(false);
            AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
            if(imgSource != null){
                try{
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgDest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgDest);
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonDisminuirActionPerformed

    private void botonGiro90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGiro90ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonGiro90ActionPerformed

    private void botonGiro180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGiro180ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonGiro180ActionPerformed

    private void botonGiro270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGiro270ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonGiro270ActionPerformed

    private void botonWebcamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonWebcamActionPerformed
        try{
            VentanaInternaCamara vi = VentanaInternaCamara.getInstance();
            this.escritorio.add(vi);
            vi.setVisible(true);
        }catch(Exception ex){
            System.err.println("Error al encontrar la camara");
        }
    }//GEN-LAST:event_botonWebcamActionPerformed

    private void botonSnapshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSnapshotActionPerformed
        VentanaInternaCamara vic = (VentanaInternaCamara) escritorio.getSelectedFrame();
        try{                      
            BufferedImage img = vic.getImage();
            VentanaInternaImagen vi = newInternalWindow();
            vi.setSize(img.getWidth(), img.getHeight());
            LienzoImagen2D l = (LienzoImagen2D)vi.getLienzo();
            l.setImage(img);
            this.escritorio.add(vi);
            vi.setTitle("Captura");
            vi.setVisible(true);
        }catch(Exception ex){ 
            System.err.println("Error al leer la imagen");
        }
    }//GEN-LAST:event_botonSnapshotActionPerformed

    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed
        nuevaVentanaInternaImagen();
    }//GEN-LAST:event_menuNuevoActionPerformed

    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuAbrirActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new VentanaPrincipal().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar BarraMultimedia;
    private javax.swing.JCheckBoxMenuItem MVerDibujo;
    private javax.swing.JCheckBoxMenuItem MVerImagen;
    private javax.swing.JCheckBoxMenuItem MVerMultimedia;
    private javax.swing.JToolBar barraDibujo;
    private javax.swing.JToolBar barraImagen;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonAlisar;
    private javax.swing.JButton botonAumentar;
    private javax.swing.JButton botonContraste;
    private javax.swing.JButton botonDisminuir;
    private javax.swing.JButton botonGiro180;
    private javax.swing.JButton botonGiro270;
    private javax.swing.JButton botonGiro90;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonIluminar;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JButton botonOscurecer;
    private javax.swing.JToggleButton botonOvalo;
    private javax.swing.JToggleButton botonPunto;
    private javax.swing.JToggleButton botonRectangulo;
    private javax.swing.JButton botonRellenar;
    private javax.swing.JToggleButton botonSeleccion;
    private javax.swing.JButton botonSnapshot;
    private javax.swing.JButton botonTransparencia;
    private javax.swing.JButton botonWebcam;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboBoxColor;
    private javax.swing.JComboBox<String> comboBoxFiltros;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JButton grabarBoton;
    private javax.swing.JButton jButton4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<File> listaReproduccion;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JMenu menuVer;
    private javax.swing.JPanel panelHerramientas;
    private javax.swing.JPanel panelSur;
    private javax.swing.JButton playBoton;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderGiro;
    private javax.swing.JSpinner spinnerStroke;
    private javax.swing.JButton stopBoton;
    // End of variables declaration//GEN-END:variables

    private void nuevaVentanaInternaImagen() {
        VentanaInternaImagen vi = newInternalWindow();
        int a=0,b=0;
        if(escritorio.getSelectedFrame()!= null){
            a=escritorio.getSelectedFrame().getX()+10;
            b=escritorio.getSelectedFrame().getY()+10;
        }
        vi.setBounds(a, b, vi.getWidth(), vi.getHeight());
        
        escritorio.add(vi);
//        int i = escritorio.getComponentCount();
        vi.setTitle("Nueva [RGB]");
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(300,300,BufferedImage.TYPE_INT_RGB);
        LienzoImagen2D l = (LienzoImagen2D)vi.getLienzo();
        l.setImage(img);
    }
    
    private VentanaInternaImagen newInternalWindow() {
        VentanaInternaImagen vi = new VentanaInternaImagen(this);
        int a=0,b=0;
        if(escritorio.getSelectedFrame()!= null){
            a=escritorio.getSelectedFrame().getX()+10;
            b=escritorio.getSelectedFrame().getY()+10;
        }
        vi.setBounds(a, b, vi.getWidth(), vi.getHeight());
        return vi;
    }
    
    private LookupTable seno(double w){
        double aux = Math.toRadians(w);
        double K = 255.0/Math.sin(Math.toRadians(90.0)); 
        byte lt[] = new byte[256];
        for (int l=0; l<256; l++){ 
            lt[l] = (byte)(K*(Math.abs(Math.sin(Math.toRadians(l*aux))))); 
        } 
        ByteLookupTable slt = new ByteLookupTable(0,lt); 
        return slt;
    }
}
